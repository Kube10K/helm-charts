# {{ template "chart.name" . }} - {{ template "chart.description" . }}

[eks_bp]: https://aws.github.io/aws-eks-best-practices/reliability/docs/networkmanagement/#use-nodelocal-dnscache
[vpc_limits]: https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html#vpc-limits-dns
[instructions]: https://kubernetes.io/docs/tasks/administer-cluster/nodelocaldns/
[ipvs_mode]: https://www.tigera.io/blog/comparing-kube-proxy-modes-iptables-or-ipvs/#:~:text=Background%3A%20iptables%20proxy%20mode
[iptables_mode]: https://www.tigera.io/blog/comparing-kube-proxy-modes-iptables-or-ipvs/#:~:text=Background%3A%20iptables%20proxy%20mode

The [EKS Best Practices][eks_bp] guide calls out to use the `NodeLocal
DNSCache` to prevent individual `coredns` pods from overwhelming the [VPC
Per-ENI DNS Packet Limit][vpc_limits].

The [Kubernetes-team supplied instructions][instructions] for running the
service are hard to follow and very error prone. Of course, they are also not
baked into any form of a Helm chart or other re-usable asset.

This chart launches the `node-local-dns` DaemonSet in your Kubernetes
environment. It supports operating in either [iptables mode][iptables_mode] or
[IPVS mode][ipvs_mode].

{{ template "chart.versionBadge" . }}{{ template "chart.typeBadge" . }}{{ template "chart.appVersionBadge" . }}

{{ template "chart.requirementsSection" . }}

{{ template "chart.valuesSection" . }}

{{ template "helm-docs.versionFooter" . }}
